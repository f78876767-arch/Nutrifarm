<?php

namespace App\Exports;

use App\Models\Product;
use App\Models\Category;
use App\Models\Variant;
use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Concerns\FromArray;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\WithMultipleSheets;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Color;
use PhpOffice\PhpSpreadsheet\Style\Alignment;

class InventoryReportExport implements WithMultipleSheets
{
    public function sheets(): array
    {
        return [
            'Summary' => new InventorySummarySheet(),
            'Products' => new ProductsInventorySheet(),
            'Categories' => new CategoriesInventorySheet(),
            'Low Stock' => new LowStockSheet(),
        ];
    }
}

class InventorySummarySheet implements FromArray, WithHeadings, WithStyles, WithColumnWidths, WithTitle
{
    public function array(): array
    {
        $totalProducts = Product::count();
        $totalVariants = Variant::count();
        $totalStock = (int) Variant::sum('stock_quantity');
        
        $variantStockValue = (float) DB::table('variants')
            ->selectRaw('SUM(COALESCE(base_price, 0) * COALESCE(stock_quantity, 0)) as total')
            ->value('total');
            
        $lowStockCount = Variant::where('stock_quantity', '<=', 10)->where('stock_quantity', '>', 0)->count();
        $outOfStockCount = Variant::where('stock_quantity', 0)->count();

        return [
            ['Total Products', $totalProducts],
            ['Total Variants', $totalVariants],
            ['Total Stock Units', number_format($totalStock)],
            ['Total Stock Value', 'Rp ' . number_format($variantStockValue, 0, ',', '.')],
            ['Low Stock Items (â‰¤10)', $lowStockCount],
            ['Out of Stock Items', $outOfStockCount],
            [''],
            ['Report Generated', now()->format('d/m/Y H:i:s')],
            ['Generated By', 'Nutrifarm Admin System'],
        ];
    }

    public function headings(): array
    {
        return [
            'Metric',
            'Value'
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => [
                'font' => ['bold' => true, 'size' => 12],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => '4CAF50']],
                'font' => ['color' => ['rgb' => 'FFFFFF']],
            ],
            'A:B' => [
                'borders' => [
                    'allBorders' => ['borderStyle' => Border::BORDER_THIN],
                ],
            ],
            'A1:B1' => [
                'alignment' => ['horizontal' => Alignment::HORIZONTAL_CENTER],
            ],
            'B2:B7' => [
                'font' => ['bold' => true],
                'alignment' => ['horizontal' => Alignment::HORIZONTAL_RIGHT],
            ]
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 20,
        ];
    }

    public function title(): string
    {
        return 'Summary';
    }
}

class ProductsInventorySheet implements FromArray, WithHeadings, WithStyles, WithColumnWidths, WithTitle
{
    public function array(): array
    {
        $products = Product::with(['category', 'variants'])->get();
        
        $data = [];
        foreach ($products as $product) {
            $totalStock = (int) $product->total_stock;
            $variantValue = $product->variants->sum(function ($variant) {
                $price = $variant->base_price ?? 0;
                $qty = $variant->stock_quantity ?? 0;
                return $price * $qty;
            });
            
            $status = $totalStock == 0 ? 'Out of Stock' : ($totalStock <= 10 ? 'Low Stock' : 'In Stock');

            $data[] = [
                $product->name,
                $product->sku ?? 'N/A',
                $product->category->name ?? 'Uncategorized',
                $product->variants->count(),
                number_format($totalStock),
                'Rp ' . number_format($variantValue, 0, ',', '.'),
                $status,
                $product->updated_at->format('d/m/Y H:i'),
            ];
        }
        
        return $data;
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'SKU',
            'Category',
            'Variants',
            'Total Stock',
            'Stock Value',
            'Status',
            'Last Updated'
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => [
                'font' => ['bold' => true, 'size' => 11],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => '2196F3']],
                'font' => ['color' => ['rgb' => 'FFFFFF']],
            ],
            'A:H' => [
                'borders' => [
                    'allBorders' => ['borderStyle' => Border::BORDER_THIN],
                ],
            ],
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 30,
            'B' => 15,
            'C' => 20,
            'D' => 10,
            'E' => 12,
            'F' => 15,
            'G' => 12,
            'H' => 18,
        ];
    }

    public function title(): string
    {
        return 'Products';
    }
}

class CategoriesInventorySheet implements FromArray, WithHeadings, WithStyles, WithColumnWidths, WithTitle
{
    public function array(): array
    {
        $categories = Category::with(['products.variants'])->get();
        
        $data = [];
        foreach ($categories as $category) {
            $productsCount = $category->products->count();
            $variantsCount = $category->products->sum(fn($product) => $product->variants->count());
            $totalStock = $category->products->sum(function ($product) {
                return $product->variants->sum('stock_quantity');
            });
            $stockValue = $category->products->sum(function ($product) {
                return $product->variants->sum(function ($variant) {
                    $price = $variant->base_price ?? 0;
                    $qty = $variant->stock_quantity ?? 0;
                    return $price * $qty;
                });
            });

            $data[] = [
                $category->name,
                $productsCount,
                $variantsCount,
                number_format($totalStock),
                'Rp ' . number_format($stockValue, 0, ',', '.'),
                $productsCount > 0 ? number_format($totalStock / $productsCount, 1) : '0',
            ];
        }
        
        return $data;
    }

    public function headings(): array
    {
        return [
            'Category Name',
            'Products',
            'Variants',
            'Total Stock',
            'Stock Value',
            'Avg Stock/Product'
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => [
                'font' => ['bold' => true, 'size' => 11],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'FF9800']],
                'font' => ['color' => ['rgb' => 'FFFFFF']],
            ],
            'A:F' => [
                'borders' => [
                    'allBorders' => ['borderStyle' => Border::BORDER_THIN],
                ],
            ],
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 12,
            'C' => 12,
            'D' => 15,
            'E' => 18,
            'F' => 18,
        ];
    }

    public function title(): string
    {
        return 'Categories';
    }
}

class LowStockSheet implements FromArray, WithHeadings, WithStyles, WithColumnWidths, WithTitle
{
    public function array(): array
    {
        $lowStockVariants = Variant::with(['product.category'])
            ->where('stock_quantity', '<=', 10)
            ->orderBy('stock_quantity', 'asc')
            ->get();
        
        $data = [];
        foreach ($lowStockVariants as $variant) {
            $status = $variant->stock_quantity == 0 ? 'OUT OF STOCK' : 'LOW STOCK';
            $urgency = $variant->stock_quantity == 0 ? 'CRITICAL' : 
                      ($variant->stock_quantity <= 5 ? 'HIGH' : 'MEDIUM');

            $data[] = [
                $variant->product->name ?? 'N/A',
                $variant->product->sku ?? 'N/A',
                $variant->product->category->name ?? 'Uncategorized',
                $variant->size ?? 'Default',
                $variant->color ?? 'Default',
                $variant->stock_quantity,
                'Rp ' . number_format($variant->base_price ?? 0, 0, ',', '.'),
                $status,
                $urgency,
            ];
        }
        
        return $data;
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'SKU',
            'Category',
            'Size',
            'Color',
            'Stock Qty',
            'Unit Price',
            'Status',
            'Urgency'
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => [
                'font' => ['bold' => true, 'size' => 11],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'F44336']],
                'font' => ['color' => ['rgb' => 'FFFFFF']],
            ],
            'A:I' => [
                'borders' => [
                    'allBorders' => ['borderStyle' => Border::BORDER_THIN],
                ],
            ],
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 15,
            'C' => 18,
            'D' => 12,
            'E' => 12,
            'F' => 10,
            'G' => 15,
            'H' => 15,
            'I' => 12,
        ];
    }

    public function title(): string
    {
        return 'Low Stock';
    }
}
