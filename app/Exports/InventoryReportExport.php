<?php

namespace App\Exports;

use App\Models\Product;
use App\Models\Category;
use App\Models\Variant;
use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Concerns\FromArray;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\WithMultipleSheets;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Color;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;

class InventoryReportExport implements WithMultipleSheets
{
    public function sheets(): array
    {
        return [
            'Summary' => new InventorySummarySheet(),
            'Products' => new ProductsInventorySheet(),
            'Categories' => new CategoriesInventorySheet(),
            'Low Stock' => new LowStockSheet(),
        ];
    }
}

class InventorySummarySheet implements FromArray, WithHeadings, WithStyles, WithColumnWidths, WithTitle, WithEvents
{
    public function array(): array
    {
        $totalProducts = Product::count();
        $totalVariants = Variant::count();
        $totalStock = (int) Variant::sum('stock_quantity');
        
        $variantStockValue = (float) DB::table('variants')
            ->selectRaw('SUM(COALESCE(base_price, 0) * COALESCE(stock_quantity, 0)) as total')
            ->value('total');
            
        $lowStockCount = Variant::where('stock_quantity', '<=', 10)->where('stock_quantity', '>', 0)->count();
        $outOfStockCount = Variant::where('stock_quantity', 0)->count();

        return [
            ['Total Products', $totalProducts],
            ['Total Variants', $totalVariants],
            ['Total Stock Units', number_format($totalStock)],
            ['Total Stock Value', 'Rp ' . number_format($variantStockValue, 0, ',', '.')],
            ['Low Stock Items (â‰¤10)', $lowStockCount],
            ['Out of Stock Items', $outOfStockCount],
            [''],
            ['Report Generated', now()->format('d/m/Y H:i:s')],
            ['Generated By', 'Nutrifarm Admin System'],
        ];
    }

    public function headings(): array
    {
        return [
            'Metric',
            'Value'
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => [
                'font' => ['bold' => true, 'size' => 12],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => '4CAF50']],
                'font' => ['color' => ['rgb' => 'FFFFFF']],
            ],
            'A:B' => [
                'borders' => [
                    'allBorders' => ['borderStyle' => Border::BORDER_THIN],
                ],
            ],
            'A1:B1' => [
                'alignment' => ['horizontal' => Alignment::HORIZONTAL_CENTER],
            ],
            'B2:B7' => [
                'font' => ['bold' => true],
                'alignment' => ['horizontal' => Alignment::HORIZONTAL_RIGHT],
            ]
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 20,
        ];
    }

    public function title(): string
    {
        return 'Summary';
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function(AfterSheet $event){
                $sheet = $event->sheet->getDelegate();
                $sheet->getColumnDimension('A')->setWidth(28);
                $sheet->getColumnDimension('B')->setWidth(28);
                $sheet->freezePane('A2');
                // No numeric formatting needed here beyond defaults
            }
        ];
    }
}

class ProductsInventorySheet implements FromArray, WithHeadings, WithStyles, WithColumnWidths, WithTitle, WithEvents
{
    public function array(): array
    {
        set_time_limit(300);
        $data = [];
        Product::with(['category','variants'])->chunk(400, function($chunk) use (&$data){
            foreach ($chunk as $product) {
                $totalStock = (int) $product->variants->sum('stock_quantity');
                $variantValue = 0;
                foreach ($product->variants as $variant) {
                    $variantValue += ($variant->base_price ?? 0) * ($variant->stock_quantity ?? 0);
                }
                $status = $totalStock === 0 ? 'Out of Stock' : ($totalStock <= 10 ? 'Low Stock' : 'In Stock');
                $data[] = [
                    $product->name,
                    $product->sku ?? 'N/A',
                    $product->category->name ?? 'Uncategorized',
                    $product->variants->count(),
                    $totalStock, // raw number
                    $variantValue, // raw number
                    $status,
                    $product->updated_at ? $product->updated_at->format('Y-m-d H:i') : null,
                ];
            }
        });
        return $data;
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'SKU',
            'Category',
            'Variants',
            'Total Stock',
            'Stock Value',
            'Status',
            'Last Updated'
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => [
                'font' => ['bold' => true, 'size' => 11],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => '2196F3']],
                'font' => ['color' => ['rgb' => 'FFFFFF']],
            ],
            'A:H' => [
                'borders' => [
                    'allBorders' => ['borderStyle' => Border::BORDER_THIN],
                ],
            ],
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 30,
            'B' => 15,
            'C' => 20,
            'D' => 10,
            'E' => 12,
            'F' => 15,
            'G' => 12,
            'H' => 18,
        ];
    }

    public function title(): string
    {
        return 'Products';
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function(AfterSheet $event){
                $sheet = $event->sheet->getDelegate();
                $highestRow = $sheet->getHighestRow();
                $sheet->freezePane('A2');
                $sheet->setAutoFilter('A1:H1');
                // Column F (Stock Value) raw numeric -> format Rupiah
                $sheet->getStyle("F2:F$highestRow")->getNumberFormat()->setFormatCode('"Rp"\ \#,#0');
                // Conditional formatting for Total Stock (E column) <=10
                $range = "E2:E$highestRow";
                $conds = $sheet->getStyle($range)->getConditionalStyles();
                $c = new \PhpOffice\PhpSpreadsheet\Style\Conditional();
                $c->setConditionType(\PhpOffice\PhpSpreadsheet\Style\Conditional::CONDITION_CELLIS)
                  ->setOperatorType(\PhpOffice\PhpSpreadsheet\Style\Conditional::OPERATOR_LESSTHANOREQUAL)
                  ->addCondition('10');
                $c->getStyle()->getFont()->getColor()->setRGB('DC2626');
                $c->getStyle()->getFont()->setBold(true);
                $conds[] = $c; $sheet->getStyle($range)->setConditionalStyles($conds);
                // Status color
                for($r=2;$r<=$highestRow;$r++){
                    $status=$sheet->getCell("G$r")->getValue();
                    if($status==='Out of Stock'){ $sheet->getStyle("G$r")->getFont()->getColor()->setRGB('DC2626'); }
                    elseif($status==='Low Stock'){ $sheet->getStyle("G$r")->getFont()->getColor()->setRGB('D97706'); }
                    else { $sheet->getStyle("G$r")->getFont()->getColor()->setRGB('059669'); }
                }
            }
        ];
    }
}

class CategoriesInventorySheet implements FromArray, WithHeadings, WithStyles, WithColumnWidths, WithTitle, WithEvents
{
    public function array(): array
    {
        set_time_limit(300);
        $data = [];
        Category::with(['products.variants'])->chunk(200, function($chunk) use (&$data){
            foreach($chunk as $category){
                $productsCount = $category->products->count();
                $variantsCount = 0; $totalStock=0; $stockValue=0;
                foreach($category->products as $product){
                    $variantsCount += $product->variants->count();
                    foreach($product->variants as $variant){
                        $qty = $variant->stock_quantity ?? 0;
                        $price = $variant->base_price ?? 0;
                        $totalStock += $qty;
                        $stockValue += $price * $qty;
                    }
                }
                $avg = $productsCount>0 ? round($totalStock / $productsCount,1) : 0;
                $data[] = [
                    $category->name,
                    $productsCount,
                    $variantsCount,
                    $totalStock,
                    $stockValue,
                    $avg,
                ];
            }
        });
        return $data;
    }

    public function headings(): array
    {
        return [
            'Category Name',
            'Products',
            'Variants',
            'Total Stock',
            'Stock Value',
            'Avg Stock/Product'
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => [
                'font' => ['bold' => true, 'size' => 11],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'FF9800']],
                'font' => ['color' => ['rgb' => 'FFFFFF']],
            ],
            'A:F' => [
                'borders' => [
                    'allBorders' => ['borderStyle' => Border::BORDER_THIN],
                ],
            ],
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 12,
            'C' => 12,
            'D' => 15,
            'E' => 18,
            'F' => 18,
        ];
    }

    public function title(): string
    {
        return 'Categories';
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function(AfterSheet $event){
                $sheet=$event->sheet->getDelegate();
                $sheet->freezePane('A2');
                $sheet->setAutoFilter('A1:F1');
                $highestRow = $sheet->getHighestRow();
                // Stock Value column E
                $sheet->getStyle("E2:E$highestRow")->getNumberFormat()->setFormatCode('"Rp"\ \#,#0');
            }
        ];
    }
}

class LowStockSheet implements FromArray, WithHeadings, WithStyles, WithColumnWidths, WithTitle, WithEvents
{
    public function array(): array
    {
        set_time_limit(300);
        $data = [];
        Variant::with(['product.category'])
            ->where('stock_quantity', '<=', 10)
            ->orderBy('stock_quantity', 'asc')
            ->chunk(500, function($chunk) use (&$data){
                foreach ($chunk as $variant) {
                    $qty = $variant->stock_quantity ?? 0;
                    $status = $qty == 0 ? 'OUT OF STOCK' : 'LOW STOCK';
                    $urgency = $qty == 0 ? 'CRITICAL' : ($qty <= 5 ? 'HIGH' : 'MEDIUM');
                    $data[] = [
                        $variant->product->name ?? 'N/A',
                        $variant->product->sku ?? 'N/A',
                        $variant->product->category->name ?? 'Uncategorized',
                        $variant->size ?? 'Default',
                        $variant->color ?? 'Default',
                        $qty,
                        ($variant->base_price ?? 0),
                        $status,
                        $urgency,
                    ];
                }
            });
        return $data;
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'SKU',
            'Category',
            'Size',
            'Color',
            'Stock Qty',
            'Unit Price',
            'Status',
            'Urgency'
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => [
                'font' => ['bold' => true, 'size' => 11],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'F44336']],
                'font' => ['color' => ['rgb' => 'FFFFFF']],
            ],
            'A:I' => [
                'borders' => [
                    'allBorders' => ['borderStyle' => Border::BORDER_THIN],
                ],
            ],
        ];
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 15,
            'C' => 18,
            'D' => 12,
            'E' => 12,
            'F' => 10,
            'G' => 15,
            'H' => 15,
            'I' => 12,
        ];
    }

    public function title(): string
    {
        return 'Low Stock';
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function(AfterSheet $event){
                $sheet=$event->sheet->getDelegate();
                $highestRow = $sheet->getHighestRow();
                $sheet->freezePane('A2');
                $sheet->setAutoFilter('A1:I1');
                // Unit Price column G -> Rupiah
                $sheet->getStyle("G2:G$highestRow")->getNumberFormat()->setFormatCode('"Rp"\ \#,#0');
                // Urgency coloring (I col)
                for($r=2;$r<=$highestRow;$r++){
                    $urg=$sheet->getCell("I$r")->getValue();
                    if($urg==='CRITICAL'){ $sheet->getStyle("I$r")->getFont()->getColor()->setRGB('DC2626'); }
                    elseif($urg==='HIGH'){ $sheet->getStyle("I$r")->getFont()->getColor()->setRGB('D97706'); }
                    else { $sheet->getStyle("I$r")->getFont()->getColor()->setRGB('059669'); }
                }
            }
        ];
    }
}
